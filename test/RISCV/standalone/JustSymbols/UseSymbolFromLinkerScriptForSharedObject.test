#---UseSymbolFromLinkerScriptForSharedObject.test--------------------------- Executable --------------------#
#BEGIN_COMMENT
# This checks that the linker is has higher precedence for linker script provide symbols
# over symbols from input shared object file passed via just-symbols
#END_COMMENT
#START_TEST
RUN: %clang %clangopts %p/Inputs/1.c -o %t1.1.o -c -ffunction-sections -fdata-sections
RUN: %clang %clangopts %p/Inputs/2.c -o %t1.2.o -c -ffunction-sections -fdata-sections
RUN: %clang %clangopts %p/Inputs/3.c -o %t1.3.o -c -ffunction-sections -fdata-sections
RUN: %link %linkopts -shared %t1.3.o -T %p/Inputs/image.t -o %t3.so
RUN: %link -MapStyle txt %linkopts -dynamic %t1.1.o %t1.2.o --just-symbols=%t3.so -T %p/Inputs/script.t -o %t.out.sharedlibrary -Map %t.map --trace=symbol=a1 2>&1 | %filecheck %s
RUN: %readelf -s %t.out.sharedlibrary 2>&1 | %filecheck %s --check-prefix=ELFCHECK
RUN: %filecheck %s --check-prefix=MAPCHECK < %t.map
#CHECK: Resolving symbol 'a1' from provide style sym def file '{{.*}}/Inputs/script.t'
#MAPCHECK: PROVIDE(a1(0x7d0) = 0x7d0);
#ELFCHECK: 000007d0     0 NOTYPE  GLOBAL DEFAULT   ABS a1
#END_TEST

