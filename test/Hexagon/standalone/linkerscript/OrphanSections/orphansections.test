# This tests that orphan sections are placed properly and virtual addresses
# assigned.
RUN: %clang %clangopts -c   %clangg0opts %p/Inputs/1.c -o %t1.o
RUN: %link %linkopts -orphan-handling=warn %t1.o -T %p/Inputs/script.t -o %t2.out 2>&1 | %filecheck %s -check-prefix=ORPHAN
RUN: %readelf -h -l -S %t2.out | %filecheck %s

#ORPHAN: no linker script rule for section .text.bar

#CHECK:  [ 1] .text.main        PROGBITS        00000000 001000 000014 00  AX  0   0 16
#CHECK:  [ 2] .text.foo         PROGBITS        00000020 001020 00000c 00  AX  0   0 16
#CHECK:  [ 3] .text.bar         PROGBITS        00000030 001030 00000c 00  AX  0   0 16
#CHECK:  [ 4] .data.main        PROGBITS        0000003c 00103c 000004 00  WA  0   0  4
#CHECK:  [ 5] .data.foo         PROGBITS        00000040 001040 000004 00  WA  0   0  4
#CHECK:  [ 6] .data.bar         PROGBITS        00000044 001044 000004 00  WA  0   0  4
#CHECK:  [ 7] .bss.main         NOBITS          00000048 001048 000004 00  WA  0   0  4
#CHECK:  [ 8] .bss.foo          NOBITS          0000004c 001048 000004 00  WA  0   0  4
#CHECK:  [ 9] .bss.bar          NOBITS          00000050 001048 000004 00  WA  0   0  4
#CHECK:  LOAD           0x001000 0x00000000 0x00000000 0x0003c 0x0003c R E 0x1000
#CHECK:  LOAD           0x00103c 0x0000003c 0x0000003c 0x0000c 0x00018 RW  0x1000
#CHECK:   00     .text.main .text.foo .text.bar
#CHECK:   01     .data.main .data.foo .data.bar .bss.main .bss.foo .bss.bar
