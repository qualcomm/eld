#---PatchPLT.test-------------- Executable------------------------#
#BEGIN_COMMENT
#Test creation of PLT/GOT slots for patchable symbols.
#END_COMMENT
#START_TEST

## Compile base.
RUN: %clang %clangopts %p/Inputs/base.s -o %t.base.o -c
RUN: %link %linkopts --no-emit-relocs --patch-enable --section-start=.plt=0x1000 --section-start=.text=0x2000 %t.base.o -o %t.base

## Detect symbol duplication between base and patch.
RUN: %clang %clangopts -O3 -fno-pic %p/Inputs/patch-dup.c -o %t.patch-dup.o -c
RUN: not %link %linkopts --patch-base=%t.base --trace-symbol=xxx_ %t.patch-dup.o -o %t.patch-dup 2>&1 | %filecheck %s --check-prefix=DUP

DUP-DAG: Symbol `xxx_f' from Input file `{{.+}}.base'        with info `(ELF)(FUNCTION)(UNDEFINED)[Global]{DEFAULT}{PATCHABLE}' being added to Namepool
DUP-DAG: Symbol `xxx_f' from Input file `{{.+}}.patch-dup.o' with info `(ELF)(NOTYPE)(UNDEFINED)[Global]{DEFAULT}' being added to Namepool
DUP-DAG: Symbol `xxx_f' from Input file `{{.+}}.patch-dup.o' with info `(ELF)(NOTYPE)(UNDEFINED)[Global]{DEFAULT}' being resolved from Namepool

DUP-DAG: Symbol `xxx_g' from Input file `{{.+}}.base'        with info `(ELF)(FUNCTION)(UNDEFINED)[Global]{DEFAULT}{PATCHABLE}' being added to Namepool
DUP-DAG: Symbol `xxx_g' from Input file `{{.+}}.patch-dup.o' with info `(ELF)(NOTYPE)(UNDEFINED)[Global]{DEFAULT}' being added to Namepool
DUP-DAG: Symbol `xxx_g' from Input file `{{.+}}.patch-dup.o' with info `(ELF)(NOTYPE)(UNDEFINED)[Global]{DEFAULT}' being resolved from Namepool

DUP-DAG: Symbol `xxx_h' from Input file `{{.+}}.base'        with info `(ELF)(FUNCTION)(DEFINE)[Absolute]{DEFAULT}' being added to Namepool
DUP-DAG: Symbol `xxx_h' from Input file `{{.+}}.patch-dup.o' with info `(ELF)(FUNCTION)(DEFINE)[Global]{DEFAULT}' being added to Namepool
DUP-DAG: Symbol `xxx_h' from Input file `{{.+}}.patch-dup.o' with info `(ELF)(FUNCTION)(DEFINE)[Global]{DEFAULT}' being resolved from Namepool

DUP-DAG: Symbol `xxx_k' from Input file `{{.+}}.base'        with info `(ELF)(FUNCTION)(DEFINE)[Absolute]{DEFAULT}' being added to Namepool
DUP-DAG: Symbol `xxx_k' from Input file `{{.+}}.patch-dup.o' with info `(ELF)(NOTYPE)(UNDEFINED)[Global]{DEFAULT}' being added to Namepool
DUP-DAG: Symbol `xxx_k' from Input file `{{.+}}.base'        with info `(ELF)(FUNCTION)(DEFINE)[Absolute]{DEFAULT}' being resolved from Namepool

## PLT symbols.
DUP-DAG: Symbol `__llvm_patchable_xxx_f' from Input file `{{.+}}.base' with info `(ELF)(NOTYPE)(DEFINE)[Absolute]{DEFAULT}' being added to Namepool
DUP-DAG: Symbol `__llvm_patchable_xxx_g' from Input file `{{.+}}.base' with info `(ELF)(NOTYPE)(DEFINE)[Absolute]{DEFAULT}' being added to Namepool

DUP-DAG: Error: multiple definition of symbol `xxx_h' in file {{.+}}.patch-dup.o and {{.+}}.base

## Compile patch.
RUN: %clang %clangopts -mno-relax -O3 -fno-pic %p/Inputs/patch.c -o %t.patch.o -c
RUN: %link %linkopts --patch-base=%t.base --section-start=.text=0x8000 --section-start=.pgot=0x9000 --trace-symbol=xxx_ %t.patch.o -o %t.patch 2>&1 \
RUN:   | %filecheck %s --check-prefix=PATCH -D#%x,PGOT=0x9000 -D#XLEN=%xlen

## Patchable patched symbol xxx_f.
PATCH-DAG: Symbol `xxx_f' from Input file `{{.+}}.patch.o' with info `(ELF)(FUNCTION)(DEFINE)[Global]{DEFAULT}' being added to Namepool
PATCH-DAG: Symbol `xxx_f' from Input file `{{.+}}.base' with info `(ELF)(FUNCTION)(UNDEFINED)[Global]{DEFAULT}{PATCHABLE}' being added to Namepool
PATCH-DAG: Symbol `xxx_f' from Input file `{{.+}}.patch.o' with info `(ELF)(FUNCTION)(DEFINE)[Global]{DEFAULT}' being resolved from Namepool

## Patchable not patched symbol xxx_g.
PATCH-DAG: Symbol `xxx_g' from Input file `{{.+}}.patch.o' with info `(ELF)(NOTYPE)(UNDEFINED)[Global]{DEFAULT}' being added to Namepool
PATCH-DAG: Symbol `xxx_g' from Input file `{{.+}}.base' with info `(ELF)(FUNCTION)(UNDEFINED)[Global]{DEFAULT}{PATCHABLE}' being added to Namepool
PATCH-DAG: Symbol `xxx_g' from Input file `{{.+}}.base' with info `(ELF)(FUNCTION)(DEFINE)[Absolute]{DEFAULT}{PATCHABLE}' being added to Namepool
TODO: Why multiple "Resolved" messages?
PATCH-DAG: Symbol `xxx_g' from Input file `{{.+}}.patch.o' with info `(ELF)(NOTYPE)(UNDEFINED)[Global]{DEFAULT}' being resolved from Namepool
PATCH-DAG: Symbol `xxx_g' from Input file `{{.+}}.base' with info `(ELF)(FUNCTION)(DEFINE)[Absolute]{DEFAULT}{PATCHABLE}' being resolved from Namepool
PATCH-DAG: Resolving symbol 'xxx_g' from provide style sym def file '{{.+}}.base'

## Not patchable symbols xxx_h and xxx_k.
PATCH-DAG: Symbol `xxx_h' from Input file `{{.+}}.patch.o' with info `(ELF)(NOTYPE)(UNDEFINED)[Global]{DEFAULT}' being added to Namepool
PATCH-DAG: Symbol `xxx_h' from Input file `{{.+}}.base' with info `(ELF)(FUNCTION)(DEFINE)[Absolute]{DEFAULT}' being added to Namepool
PATCH-DAG: Symbol `xxx_h' from Input file `{{.+}}.base' with info `(ELF)(FUNCTION)(DEFINE)[Absolute]{DEFAULT}' being resolved from Namepool
PATCH-DAG: Symbol `xxx_k' from Input file `{{.+}}.patch.o' with info `(ELF)(NOTYPE)(UNDEFINED)[Global]{DEFAULT}' being added to Namepool
PATCH-DAG: Symbol `xxx_k' from Input file `{{.+}}.base' with info `(ELF)(FUNCTION)(DEFINE)[Absolute]{DEFAULT}' being added to Namepool
PATCH-DAG: Symbol `xxx_k' from Input file `{{.+}}.base' with info `(ELF)(FUNCTION)(DEFINE)[Absolute]{DEFAULT}' being resolved from Namepool

## PLT symbols.
PATCH-DAG: Symbol `__llvm_patchable_xxx_f' from Input file `{{.+}}.base' with info `(ELF)(NOTYPE)(DEFINE)[Absolute]{DEFAULT}' being added to Namepool
PATCH-DAG: Symbol `__llvm_patchable_xxx_g' from Input file `{{.+}}.base' with info `(ELF)(NOTYPE)(DEFINE)[Absolute]{DEFAULT}' being added to Namepool

## Evidence of .pgot patching.
PATCH-DAG: Trace: Symbol xxx_f, application site: 0x[[#%x,PGOT]]
PATCH-DAG: Trace: Symbol xxx_g, application site: 0x[[#%x,PGOT+XLEN]]

RUN: (%readelf -s %t.base; %readelf -s %t.patch) | %filecheck %s --check-prefix=SYM --match-full-lines -D#%x,FP=0x8000

## Read value values from base image.
SYM: Symbol table '.symtab' contains [[#]] entries:
SYM-DAG:   [[#]]: {{0*}}[[#%x,FA:]]    [[#]] NOTYPE  GLOBAL DEFAULT     [[#]] __llvm_patchable_xxx_f
SYM-DAG:   [[#]]: {{0*}}[[#%x,GA:]]    [[#]] NOTYPE  GLOBAL DEFAULT     [[#]] __llvm_patchable_xxx_g
SYM-DAG:   [[#]]: {{0*}}[[#%x,F:]]     [[#]] FUNC    GLOBAL DEFAULT     [[#]] xxx_f
SYM-DAG:   [[#]]: {{0*}}[[#%x,G:]]     [[#]] FUNC    GLOBAL DEFAULT     [[#]] xxx_g
SYM-DAG:   [[#]]: {{0*}}[[#%x,H:]]     [[#]] FUNC    GLOBAL DEFAULT     [[#]] xxx_h
SYM-DAG:   [[#]]: {{0*}}[[#%x,K:]]     [[#]] FUNC    GLOBAL DEFAULT     [[#]] xxx_k

## Check symbol values in patch image. 0x8000 is the new address for f, which is the only code in the new .text section.
SYM: Symbol table '.symtab' contains [[#]] entries:
SYM-DAG:   [[#]]: {{0*}}[[#FA]]        [[#]] NOTYPE  GLOBAL DEFAULT       ABS __llvm_patchable_xxx_f
SYM-DAG:   [[#]]: {{0*}}[[#GA]]        [[#]] NOTYPE  GLOBAL DEFAULT       ABS __llvm_patchable_xxx_g
SYM-DAG:   [[#]]: {{0*}}[[#FP]]        [[#]] FUNC    GLOBAL DEFAULT     [[#]] xxx_f
SYM-DAG:   [[#]]: {{0*}}[[#G]]         [[#]] FUNC    GLOBAL DEFAULT       ABS xxx_g
SYM-DAG:   [[#]]: {{0*}}[[#H]]         [[#]] FUNC    GLOBAL DEFAULT       ABS xxx_h
SYM-DAG:   [[#]]: {{0*}}[[#K]]         [[#]] FUNC    GLOBAL DEFAULT       ABS xxx_k

## The new .pgot will have the first pointer replaced, and the other one kept as is.
RUN: (%readelf -s %t.base; %elfcopy -O binary -j .pgot %t.patch - | od -v -Ax -t x%xlen -w%xlen) | %filecheck %s --check-prefix=PGOT --match-full-lines -D#%x,FP=0x8000 -D#XLEN=%xlen
PGOT:      [[#]]: [[#%x,G:]]           [[#]] FUNC    GLOBAL DEFAULT     [[#]] xxx_g
PGOT:      {{0*}}0                   {{0*}}[[#FP]]
PGOT-NEXT: {{0*}}[[#%x,mul(XLEN,1)]] {{0*}}[[#%x,G]]
PGOT-NEXT: {{0*}}[[#%x,mul(XLEN,2)]]

#END_TEST
