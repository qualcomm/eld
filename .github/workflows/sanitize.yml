name: Nightly sanitizer check

on:
  schedule:
    - cron: '0 7 * * *'  # Runs daily at 1:00 AM CST
  workflow_dispatch:     # Allows manual triggering

jobs:
  build-and-runtest-with-asan-ubsan:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Clang 20
        uses: egor-tensin/setup-clang@v1
        with:
          version: "20"
          platform: x64

      - name: Install libc++ and libc++abi
        run: |
          sudo apt update
          sudo apt install -y clang libc++-dev libc++abi-dev ccache libclang-rt-20-dev

      - name: Build and Test with Clang and show versions
        run: |
          echo "clang version"
          clang --version
          echo "clang++ version"
          clang++ -stdlib=libc++ --version
          dpkg -L clang
          echo '#include <iostream>' > test.cpp
          echo 'int main() { std::cout << "Hello, Clang on Ubuntu 24.04!" << std::endl; return 0; }' >> test.cpp
          clang++ -std=c++17 -stdlib=libc++ test.cpp -o test_clang
          ./test_clang

      - name: CPU and Memory information
        run: |
          echo "Number of CPUs:"
          nproc --all # or grep -c ^processor /proc/cpuinfo
          echo "Memory information:"
          free -h # or cat /proc/meminfo

      - name: Checkout llvm-project
        uses: actions/checkout@v4
        with:
          repository: llvm/llvm-project
          path: llvm-project
          ref: main

      - name: Checkout eld
        uses: actions/checkout@v4
        with:
          path: llvm-project/llvm/tools/eld
          ref: main

      - name: Run CMake
        run: |
          mkdir obj
          cd obj
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_USE_SANITIZER="Address;Undefined" \
            -DLLVM_ENABLE_PROJECTS="llvm;clang;clang-tools-extra" \
            -DCMAKE_C_COMPILER:STRING=`which clang` \
            -DCMAKE_CXX_COMPILER:STRING=`which clang++` \
            -DCMAKE_CXX_FLAGS:STRING="-stdlib=libc++" \
            -DLLVM_TARGETS_TO_BUILD:STRING="ARM;AArch64;RISCV;Hexagon;X86" \
            -DLLVM_CCACHE_BUILD:BOOL=ON \
            -DLLVM_CCACHE_DIR:STRING=$PWD/ccache/ \
            -DELD_TARGETS_TO_BUILD='ARM;AArch64;RISCV;Hexagon;x86_64' \
            -DLLVM_ENABLE_SPHINX=OFF \
            ../llvm-project/llvm

      - name: Build Project
        run: |
          cd obj
          ninja -j8

      - name: Run tests
        run: |
          cd obj
          ninja -j8 check-eld

      - name: Build Report
        run: |
          cd llvm-project/llvm/tools/eld
          echo "{"time":"$(date +%Y-%m-%d-%H:%M)","build":"pass","tests":"pass"}" >> reports/reports.json
          git add reports/reports.json
          git commit -m "Update Build Reports"
